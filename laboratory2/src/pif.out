let on symbol table: (-1;-1)
func on symbol table: (-1;-1)
check_max on symbol table: (9;0)
( on symbol table: (-1;-1)
integer on symbol table: (-1;-1)
a on symbol table: (9;1)
, on symbol table: (-1;-1)
integer on symbol table: (-1;-1)
b on symbol table: (0;0)
, on symbol table: (-1;-1)
integer on symbol table: (-1;-1)
c on symbol table: (1;0)
) on symbol table: (-1;-1)
returns on symbol table: (-1;-1)
integer on symbol table: (-1;-1)
{ on symbol table: (-1;-1)
print on symbol table: (-1;-1)
"This function will compute the max" on symbol table: (0;1)
; on symbol table: (-1;-1)
if on symbol table: (-1;-1)
( on symbol table: (-1;-1)
a on symbol table: (9;1)
> on symbol table: (-1;-1)
b on symbol table: (0;0)
) on symbol table: (-1;-1)
then on symbol table: (-1;-1)
{ on symbol table: (-1;-1)
if on symbol table: (-1;-1)
( on symbol table: (-1;-1)
a on symbol table: (9;1)
> on symbol table: (-1;-1)
c on symbol table: (1;0)
) on symbol table: (-1;-1)
then on symbol table: (-1;-1)
return on symbol table: (-1;-1)
a on symbol table: (9;1)
else on symbol table: (-1;-1)
return on symbol table: (-1;-1)
c on symbol table: (1;0)
} on symbol table: (-1;-1)
else on symbol table: (-1;-1)
{ on symbol table: (-1;-1)
if on symbol table: (-1;-1)
( on symbol table: (-1;-1)
b on symbol table: (0;0)
> on symbol table: (-1;-1)
c on symbol table: (1;0)
) on symbol table: (-1;-1)
then on symbol table: (-1;-1)
return on symbol table: (-1;-1)
b on symbol table: (0;0)
else on symbol table: (-1;-1)
return on symbol table: (-1;-1)
c on symbol table: (1;0)
} on symbol table: (-1;-1)
} on symbol table: (-1;-1)
; on symbol table: (-1;-1)
