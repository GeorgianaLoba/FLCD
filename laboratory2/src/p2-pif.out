let on symbol table: (-1;-1)
func on symbol table: (-1;-1)
check_prime on symbol table: (8;0)
( on symbol table: (-1;-1)
integer on symbol table: (-1;-1)
a on symbol table: (9;0)
) on symbol table: (-1;-1)
returns on symbol table: (-1;-1)
boolean on symbol table: (-1;-1)
{ on symbol table: (-1;-1)
if on symbol table: (-1;-1)
( on symbol table: (-1;-1)
a on symbol table: (9;0)
is on symbol table: (-1;-1)
1 on symbol table: (1;0)
) on symbol table: (-1;-1)
or on symbol table: (-1;-1)
( on symbol table: (-1;-1)
a on symbol table: (9;0)
is on symbol table: (-1;-1)
2 on symbol table: (2;0)
) on symbol table: (-1;-1)
then on symbol table: (-1;-1)
return on symbol table: (-1;-1)
1 on symbol table: (1;0)
if on symbol table: (-1;-1)
( on symbol table: (-1;-1)
a on symbol table: (9;0)
% on symbol table: (-1;-1)
2 on symbol table: (2;0)
is on symbol table: (-1;-1)
0 on symbol table: (0;0)
) on symbol table: (-1;-1)
then on symbol table: (-1;-1)
return on symbol table: (-1;-1)
0 on symbol table: (0;0)
let on symbol table: (-1;-1)
d on symbol table: (2;1)
= on symbol table: (-1;-1)
2 on symbol table: (2;0)
; on symbol table: (-1;-1)
while on symbol table: (-1;-1)
( on symbol table: (-1;-1)
d on symbol table: (2;1)
<= on symbol table: (-1;-1)
a on symbol table: (9;0)
/ on symbol table: (-1;-1)
2 on symbol table: (2;0)
) on symbol table: (-1;-1)
then on symbol table: (-1;-1)
{ on symbol table: (-1;-1)
if on symbol table: (-1;-1)
( on symbol table: (-1;-1)
a on symbol table: (9;0)
% on symbol table: (-1;-1)
d on symbol table: (2;1)
is on symbol table: (-1;-1)
0 on symbol table: (0;0)
) on symbol table: (-1;-1)
then on symbol table: (-1;-1)
return on symbol table: (-1;-1)
0 on symbol table: (0;0)
d on symbol table: (2;1)
= on symbol table: (-1;-1)
d on symbol table: (2;1)
+ on symbol table: (-1;-1)
1 on symbol table: (1;0)
} on symbol table: (-1;-1)
return on symbol table: (-1;-1)
1 on symbol table: (1;0)
} on symbol table: (-1;-1)
; on symbol table: (-1;-1)
